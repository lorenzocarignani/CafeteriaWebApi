// <auto-generated />
using System;
using CafeteriaWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeteriaWebApi.Migrations
{
    [DbContext(typeof(CafeteriaContext))]
    [Migration("20231112235533_FirstMigrationSalesOrderLineOrdersClient")]
    partial class FirstMigrationSalesOrderLineOrdersClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("IdOrder");

                    b.HasIndex("AdminId");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("IdProduct");

                    b.HasIndex("AdminId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.SaleOrderLine", b =>
                {
                    b.Property<int>("IdSaleOrderLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantityOfProduct")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdSaleOrderLine");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("SaleOrderLines");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Admin", b =>
                {
                    b.HasBaseType("CafeteriaWebApi.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            Name = "admin",
                            Password = "admin",
                            State = true
                        });
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Client", b =>
                {
                    b.HasBaseType("CafeteriaWebApi.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Client");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Email = "client@gmail.com",
                            Name = "client",
                            Password = "client",
                            State = true
                        });
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Order", b =>
                {
                    b.HasOne("CafeteriaWebApi.Data.Entities.Admin", null)
                        .WithMany("Orders")
                        .HasForeignKey("AdminId");

                    b.HasOne("CafeteriaWebApi.Data.Entities.Client", "Clients")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Product", b =>
                {
                    b.HasOne("CafeteriaWebApi.Data.Entities.Admin", null)
                        .WithMany("Products")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.SaleOrderLine", b =>
                {
                    b.HasOne("CafeteriaWebApi.Data.Entities.Order", "Orders")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeteriaWebApi.Data.Entities.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Order", b =>
                {
                    b.Navigation("SaleOrderLines");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Admin", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CafeteriaWebApi.Data.Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
